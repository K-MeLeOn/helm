apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "mixpost.fullname" . }}
  labels:
    {{- include "mixpost.labels" . | nindent 4 }}
spec:
  {{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.replicaCount }}
  {{- end }}
  selector:
    matchLabels:
      {{- include "mixpost.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "mixpost.selectorLabels" . | nindent 8 }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "mixpost.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - name: http
              protocol: TCP
              containerPort: {{ .Values.service.port }}
          env:
            - name: COMPOSER_ALLOW_SUPERUSER
              value: '1'
            - name: LICENCE_KEY
              valueFrom:
                secretKeyRef:
                  key: {{ .Values.app.licenceKey.secretKey }}
                  name: {{ .Values.app.licenceKey.secretName }}
            - name: COMPOSER_AUTH
              valueFrom:
                secretKeyRef:
                  key: {{ .Values.app.composerAuth.secretKey }}
                  name: {{ .Values.app.composerAuth.secretName }}
            - name: APP_NAME
              value: {{ .Values.app.name }}
            - name: MIXPOST_CORE_PATH
              value: {{ .Values.app.corePath }}
            - name: APP_KEY
              valueFrom:
                secretKeyRef:
                  key: {{ .Values.app.key.secretKey }}
                  name: {{ .Values.app.key.secretName }}
            - name: APP_URL
              valueFrom:
                configMapKeyRef:
                  key: {{ .Values.app.url.configMapKey }}
                  name: {{ .Values.app.url.configMapName }}
            - name: APP_DOMAIN
              valueFrom:
                configMapKeyRef:
                  key: {{ .Values.app.domain.configMapKey }}
                  name: {{ .Values.app.domain.configMapName }}
            {{- if .Values.app.storage.s3.enabled }}
            - name: MIXPOST_DISK
              value: s3
            {{ end }}
            - name: AWS_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  key: {{ .Values.app.storage.s3.accessKey.secretKey }}
                  name: {{ .Values.app.storage.s3.accessKey.secretName }}
            - name: AWS_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  key: {{ .Values.app.storage.s3.secretAccessKey.secretKey }}
                  name: {{ .Values.app.storage.s3.secretAccessKey.secretName }}
            - name: AWS_DEFAULT_REGION
              valueFrom:
                secretKeyRef:
                  key: {{ .Values.app.storage.s3.region.secretKey }}
                  name: {{ .Values.app.storage.s3.region.secretName }}
            - name: AWS_BUCKET
              valueFrom:
                secretKeyRef:
                  key: {{ .Values.app.storage.s3.bucket.secretKey }}
                  name: {{ .Values.app.storage.s3.bucket.secretName }}
            - name: AWS_ENDPOINT
              valueFrom:
                secretKeyRef:
                  key: {{ .Values.app.storage.s3.endpoint.secretKey }}
                  name: {{ .Values.app.storage.s3.endpoint.secretName }}
            - name: AWS_USE_PATH_STYLE_ENDPOINT
              valueFrom:
                secretKeyRef:
                  key: {{ .Values.app.storage.s3.usePathStyleEndpoint.secretKey }}
                  name: {{ .Values.app.storage.s3.usePathStyleEndpoint.secretName }}
            - name: MIXPOST_DEFAULT_LOCALE
              value: {{ .Values.app.defaultLocale }}
            - name: DB_HOST
              valueFrom:
                configMapKeyRef:
                  key: {{ .Values.db.mariaDB.host.configMapKey }}
                  name: {{ .Values.db.mariaDB.host.configMapName }}
            - name: DB_DATABASE
              valueFrom:
                configMapKeyRef:
                  key: {{ .Values.db.mariaDB.db.configMapKey }}
                  name: {{ .Values.db.mariaDB.db.configMapName }}
            - name: DB_PORT
              valueFrom:
                configMapKeyRef:
                  key: {{ .Values.db.mariaDB.port.configMapKey }}
                  name: {{ .Values.db.mariaDB.port.configMapName }}
            - name: DB_USERNAME
              valueFrom:
                secretKeyRef:
                  key: {{ .Values.db.mariaDB.user.secretKey }}
                  name: {{ .Values.db.mariaDB.user.secretName }}
            - name: DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  key: {{ .Values.db.mariaDB.pass.secretKey }}
                  name: {{ .Values.db.mariaDB.pass.secretName }}
            - name: REDIS_HOST
              valueFrom:
                configMapKeyRef:
                  key: {{ .Values.db.dragonfly.host.configMapKey }}
                  name: {{ .Values.db.dragonfly.host.configMapName }}
            - name: REDIS_PORT
              valueFrom:
                configMapKeyRef:
                  key: {{ .Values.db.dragonfly.port.configMapKey }}
                  name: {{ .Values.db.dragonfly.port.configMapName }}
            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  key: {{ .Values.db.dragonfly.pass.secretKey }}
                  name: {{ .Values.db.dragonfly.pass.secretName }}
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          volumeMounts:
            - mountPath: /var/www/html/storage/app
              name: storage
      volumes:
        - name: storage
          {{- if and .Values.app.storage.public.enabled (not .Values.app.storage.public.existingClaim) (not .Values.app.storage.s3.enabled) }}
          persistentVolumeClaim:
            claimName: {{ .Values.app.storage.public.existingClaim | default (include "persistence.storage.name" .) }}
          {{- else }}
          emptyDir: {}
          {{ end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
